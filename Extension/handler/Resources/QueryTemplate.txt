let
    BatchSize = 200,
    MaxFieldsCount = 100,
    MashupTypeMap = [
        boolean = type logical,
        dateTime = type datetime,
        double = type number,
        history = type text,
        html = type text,
        integer = Int64.Type,
        plainText = type text,
        string = type text,
        treePath = type text
    ],

    Text.FromHtml = (value as nullable text) as nullable text =>
        let
            lines = if Web.Page <> null
                then Text.FromHtmlRec(Web.Page(value){0}[Data])
                else { value },
            result = if value <> null
                then Text.Combine(lines)
                else null
        in
            result,

    Text.FromHtmlRec = (nodesTable as table) as list =>
        let
            nodes = Table.ToRecords(nodesTable),
            lines = List.TransformMany(nodes,
                (n) =>
                    let
                        text = if n[Text]? <> null then { n[Text] } else {},
                        children = if n[Children]? <> null then @Text.FromHtmlRec(n[Children]) else {},
                        br = if n[Name]? = "P" or n[Name]? = "BR" 
                            then { "#(lf)" }
                            else if n[Name]? = "DIV"
                                then if n[Children]? <> null and Table.RowCount(n[Children]) = 1 and n[Children]{0}[Name] = "BR"
                                    then {}
                                    else { "#(lf)" }
                                else {},
                        lines = List.Combine({ text, children, br })
                    in
                        lines,
                (n, t) => t)
        in
            lines,

    Batch = (items as list, batchSize as number) as list =>
        List.Generate(
            () => [batch = List.FirstN(items, batchSize), tail = List.Skip(items, batchSize)],
            each not List.IsEmpty([batch]),
            each [batch = List.FirstN([tail], batchSize), tail = List.Skip([tail], batchSize)],
            each [batch]),

    WiqlQueryById = (url as text, scope as record, id as text) =>
        let
            #"Format url" = url
                & (if scope[Collection]? <> null then "/" & Uri.EscapeDataString(scope[Collection]) else "")
                & (if scope[Project]? <> null then "/" & Uri.EscapeDataString(scope[Project]) else "")
                & "/_apis/wit/wiql/" & Uri.EscapeDataString(id) 
                & "?api-version=1.0",
            #"Get result" = Json.Document(VSTS.Contents(#"Format url"))
        in 
            #"Get result",

    GetWorkItemFieldValuesAsRecords = 
        (
            url as text,
            scope as record,
            ids as list, 
            optional fields as list, 
            optional options as record
        ) 
        as list => 
        let
            collection = Record.FieldOrDefault(scope2, "Collection", "DefaultCollection"),
            fieldsQueryString = if (fields <> null and List.Count(fields) <= MaxFieldsCount) 
                then "&fields=" & Text.Combine(fields, ",")
                else "",
            
            #"Format field definitions url" = url
                & (if scope[Collection]? <> null then "/" & Uri.EscapeDataString(scope[Collection]) else "")
                & "/_apis/wit/workitems"
                & "?api-version=1.0"
                & fieldsQueryString,
            workItemIdsBatches = Batch(ids, BatchSize),
            workItemIdsBatchQueryStrings = List.Transform(workItemIdsBatches,
                each "&ids=" & Text.Combine(List.Transform(_, Number.ToText), ",")),
            fieldValues = List.TransformMany(workItemIdsBatchQueryStrings,
                each Json.Document(VSTS.Contents(#"Format field definitions url" & _))[value],
                (batch, _) => _)
        in
            fieldValues,

    GetWorkItemFieldValues = 
        (
            url as text, 
            scope as record, 
            ids as list, 
            fields as list,
            optional options as record
        ) 
        as table => 
        let
            optionsDefault = [
                AsOf = null,
                ConvertHtmlToText = true,
                UseReferenceNames = false
            ],
            optionsEffective = optionsDefault & (if options  <> null then options else []),

            #"Get field records" = GetWorkItemFieldValuesAsRecords(url, scope, ids, fields, optionsEffective),
            
            #"Format field definitions url" = url
                & (if scope[Collection]? <> null then "/" & Uri.EscapeDataString(scope[Collection]) else "")
                & "/_apis/wit/fields"
                & "?api-version=1.0",
            #"Get field definitions" = Json.Document(VSTS.Contents(#"Format field definitions url")),
            #"Convert field definitions to table" = Table.FromRecords(#"Get field definitions"[value]),
            #"Select relevant fields" = Table.SelectRows(#"Convert field definitions to table", each List.Contains(fields, [referenceName])),
            #"Add addMashupType" = Table.AddColumn(#"Select relevant fields", "mashupType", each Record.Field(MashupTypeMap, [type])),

            #"Convert fields to table" = Table.FromList(List.Transform(#"Get field records", each [fields]), Splitter.SplitByNothing(), { "Records" }, null, ExtraValues.Error),
            #"Expand fields records" = Table.ExpandRecordColumn(#"Convert fields to table", "Records", fields, fields),

            #"Define type conversion" = Table.ToList(Table.SelectColumns(#"Add addMashupType", {"referenceName", "mashupType"}), each {_{0}, _{1} }),
            #"Apply type conversion" = Table.TransformColumnTypes(#"Expand fields records", #"Define type conversion"),

            #"Define html conversion" = List.Transform(Table.SelectRows(#"Add addMashupType", each [type] = "html")[#"referenceName"], each { _, Text.FromHtml }),
            #"Apply html conversion" = if optionsEffective[ConvertHtmlToText]
                then Table.TransformColumns(#"Apply type conversion", #"Define html conversion")
                else #"Apply type conversion",

            #"Define name conversion" = Table.ToList(Table.SelectColumns(#"Add addMashupType", {"referenceName", "name"}), each {_{0}, _{1} }),
            #"Apply name conversion" = if optionsEffective[UseReferenceNames]
                then #"Apply html conversion"
                else Table.RenameColumns(#"Apply html conversion", #"Define name conversion")
        in
            #"Apply name conversion",

    WiqlRunQueryById = (url as text, scope as record, id as text, optional options as record) as table =>
        let
            #"Get Wiql result" = WiqlQueryById(url, scope, id),
            #"Get fields" = List.Transform(#"Get Wiql result"[columns], each [referenceName]),
            #"Get ids" = List.Transform(Record.FieldOrDefault(#"Get Wiql result", "workItems", {}), each [id]),
            #"Get TFS table" = GetWorkItemFieldValues(url, scope, #"Get ids", #"Get fields", options)
        in
            #"Get TFS table",

    Source = WiqlRunQueryById("@URL", [Project = "@PROJECT"], "@ID", [ConvertHtmlToText = true])
in
    Source